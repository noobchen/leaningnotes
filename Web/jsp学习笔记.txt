1.jsp技术
        jsp是sun提供动态web资源开发技术。为了解决在Servlet中拼写html内容css、js内容十分不方便的问题，sun提供了这样一门技术。如果说Servlet是在java中嵌套HTML，则jsp就是在HTML中嵌套java代码,从而十分便于组织html页面
        
        jsp页面在第一次被访问到时会被jsp翻译引擎翻译成一个Servlet,从此对这个jsp页面的访问都是由这个Servlet执行后进行输出
        
2.JSP的组成部分
    2.1模版元素
                直接书写在JSP中的HTML内容，看起来就像写HTML一样的方便，但是最终会在被翻译成Servlet的过程中 out.write()直接输出
    2.2脚本表达式
            <%= 表达式%> 接受的是一段java表达式，在JSP翻译到Servlet的过程中，将会计算表达式的值，利用out.write()输出出去
    2.3脚本片段
        <%  %>直接可以在脚本片段中书写java源代码，其中的源代码将会直接拷贝到翻译过来的servlet中的响应位置上。
    2.4JSP声明
        <%! %>在其中可以写java代码，其中的源代码会被拷贝到servlet中的service方法之外，可以利用它来为servlet增加成员方法、成员变量、静态代码块
    2.5JSP注释
        <%-- --%>被jsp注释包围起来的内容将不会被服务器翻译到servlet之中，要注意区分html注释和java注释的区别
        jsp注释不会被翻译到servlet中，会在翻译时遗弃
        java注释不会被编译到class文件中，会在编译时遗弃
        html注释将会当作模版元素，直接输出到浏览器中，浏览器将不会显示html注释中的内容
    2.6JSP指令
        2.6.1page指令
            用来通知翻译引擎，如果翻译当前的JSP
            [ language="java" ] 当前JSP使用的开发语言
            [ extends="package.class" ] 当前jsp翻译成servlet后要继承的类，注意此值必须是一个servlet的子类，一般情况下不要改
            [ import="{package.class | package.*}, ..." ] 导入需要使用到的包，自动导入以下包 java.lang.*;javax.servlet.*;javax.servlet.jsp.*;javax.servlet.http.*;
            [ session="true | false" ] 用来指定当前页面是否使用session，如果设置为true，则翻译过来的servlet中将会有对session对象的引用，于是可以直接在jsp中使用session隐式对象。但是这将导致一旦访问jsp就会调用request.getSession()方法，可能导致不必要的空间浪费。如果确定jsp中不需要session可以设为false
            [ buffer="none | 8kb | sizekb" ] out隐式对象所使用的缓冲区的大小
            [ autoFlush="true | false" ] out隐式对象是否自动刷新缓冲区，默认为true，不需要更改
            [ isThreadSafe="true | false" ] 翻译过来的servlet是否实现SingleThreadModel
            [ errorPage="relative_url" ] 如果页面出错，将要跳转到的页面，除了在jsp中使用此属性指定错误页面外也可以在web.xml中配置整个web应用的错误页面，如果两个都设置则jsp中的此属性起作用
            [ isErrorPage="true | false" ] 如果设置此属性为true,翻译过来的servlet中将含有Exception隐式对象,其中封装的就是上一个页面中抛出的异常对象
            [ contentType="mimeType [ ;charset=characterSet ]" | "text/html ; charset=ISO-8859-1" ] 和jsp乱码相关的指令,用来指定jsp输出时,设置的Content-Type响应头用来指定浏览器打开的编码
            [ pageEncoding="characterSet | ISO-8859-1" ] 服务器翻译jsp时使用的编码集.如果向防止jsp乱码,应该保证文件的保存编码和jsp翻译成servlet用的编码以及输出到浏览器后浏览器打开的编码一致.此属性一旦设置好,翻译引擎会间接帮我们设置content-type属性.
            [ isELIgnored="true | false" ] 当前页面是否使用el表达式,设置为false时表示启用el,j2ee4.0开始默认支持,j2ee4.0一下做开发时,如果要使用el表达式,需将此属性设置为false

        2.6.2include指令
            <%@ incluede file=""%> 静态引入其他页面的内容
            *静态引入：在源文件级别进行合并，多个jsp生成一个servlet，最终由这一个servlet生成响应。推荐使用。
            *动态引入：在运行时将多个输出进行合并，多个jsp分别生成多个servlet，最终由这多个servlet生成响应，组成一个输出流，提供响应。执行效率没有静态引入高。
            
        2.6.3taglib指令
            <%@ taglib uri="" prefix=""%>用来引入标签库。
            uri指定被引入.tld文件的名称空间
            prefix 对该名称空间的一个缩写
    
    2.7九大隐式对象
            config
            application
            request
            response
            session
            out
            page
            pageContext
            Exception
        
        2.7.1out对象
            可以将他理解成response.getWriter()获得的PrintWriter.
            它自带一个缓冲区，其大小收page指令中的buffer的设定限制。当缓冲区满或缓冲区被关闭或当前jsp页面结束，则此缓冲区中的内容将被刷新到response.getWriter（）的缓冲区中。
        2.7.2PageContext对象
            （1）获取其它八大隐式对象，可以认为是一个入口对象。
            （2）获取其所有域中的数据
                    pageContext操作所有域中属性的方法
                    public java.lang.Object?getAttribute(java.lang.String?name,int?scope)
                    public void setAttribute(java.lang.String?name, java.lang.Object?value,int?scope)
                    public void?removeAttribute(java.lang.String?name,int?scope)
                    
                    pageContext中代表域的常量
                    PageContext.APPLICATION_SCOPE
                    PageContext.SESSION_SCOPE
                    PageContext.REQUEST_SCOPE
                    PageContext.PAGE_SCOPE 
                    
                    findAttribute方法,在四大域中搜寻属性，搜寻的顺序是page域、request域、session域、application域，从小域到大域开始搜索，如果搜索到就直接获取该值，如果所有域中都找不到，返回一个null(与el表达式不同，此处返回null，对网页是不友好的)

            （3）作为域对象使用
                    作用的范围：真个jsp页面，是四大作用域中最小的一个。
                    生命周期：当对jsp的请求开始时生成，当响应结束时销毁。
            
            （4）跳转到其他资源
                        其身上提供了forward和include方法，简化重定向和转发的操作
    3.零散知识
        (1)jsp映射
            <servlet>
                <servlet-name>index</servlet-name>
                <jsp-file>/index.jsp</jsp-file>
            </servlet>
            <servlet-mapping>
                <servlet-name>index</servlet-name>
                <url-pattern>/jsp/*</url-pattern>
            </servlet-mapping>
            
        (2)JSP最佳实践
        
        (3)域的总结
            servletContext (application)
            session (session)
            request (request)
            pageContext
            
            如果一个数据只在当前jsp页面使用,可以使用pageContext域存储
            如果一个数据,除了在当前Servlet中使用,还要在请求转发时带到其他Servlet处理或jsp中显示,这个时候用request域
            如果一个数据,除了现在我自己要用,过一会我自己还要用,存在session域
            如果一个数据,除了现在我自己要用过一会其他人也要用,存在ServletContext域中
            =================================================================================================================================       
jsp的标签技术:在jsp页面中最好不要出现java代码,这时我们可以使用标签技术将java代码替换成标签来表示
    
    1.JSP标签：由sun公司提供，属于jsp规范中的内容，不需要引入第三方标签库
        <jsp:inclue>用来替代request.getRequestDispatcher().include()
        <jsp:forward>用来替代request.getRequestDispatcher().forward()
        <jsp:param>配合前两个标签使用，可以在包含或转发时，带一些参数过去
        
        <jsp:useBean id="beanName" class="package.class"  scope="page|request|session|application"/>在指定域中搜寻名字为id设置值的bean，如果没有就在该域中创建一个
        <jsp:setProperty name="beanName" 
            { 
                property="propertyName" value="{string | <%= expression %>}" |
                property="propertyName" [ param="parameterName" ] | 
                property= "*" 
            }/> 用于为bean的属性负值name指定bean的名字，property指定要设定的属性的名字，value指定设定的属性的值，param用来指定使用哪个请求参数设定该属性，property可以设置为*,用来将所有的请求参数自动设置为bean对应的属性上
            
            <jsp:getProperty name="beanInstanceName" property="PropertyName" />用于获取属性的值输出到输出流中，其中name指定bean的名字，property指定bean上属性的名字
    2.el表达式：替代<%= %>脚本表达式，在j2ee1.4以前默认是不支持el，如果需要需要指定page指令[isELIgnored="true | false" ]为false，j2ee4.0后默认支持el
        2.1获得域中的属性
        ${propName}在四个域中搜寻proName属性，输出该值到输出流中
        ${pageScope/requestScope/sessionScope/applicationScope.proName}获取指定域中的属性
        ${attr[0]}获取域中的集合的指定元素
        ${list[0]}获取list中的指定位置元素
        ${map.keyName}获取map中指定键的值
        ${bean.propName}获取javaBean的属性，可以认为是调用了javaBean的getXXX方法，
        ~最重要的一个应用场景：在写路径的时候最好不要把web应用名称写死，java中应该用request.getContextPath去获取。jsp中就用el获取：${pageContext.request.contextPath}
        ~.和[]区别使用点的地方都可以用中括号，如果属性名是数字或包含特殊符号（.-）就必须使用中括号。例子：${map["first.name"]}
        2.2进行简单运算
            （1）算数运算：所有参与元算的元素都会被转成数字，如果不能转就报错，空元素参与运算当作没参与。
            （2）关系运算：
            （3）逻辑运算:
            （4）empty/not empty判断一个对象或集合或数组是否为空或长度为0     
            （5）三元表达式 name == null ? "张三" : name;
        2.3获取web开发常用对象
            pageContext:代表pageContext对象
            pageScope：代表pageContext对象中的保存属性的map对象
            reqeustScope：代表reqeust对象中的保存属性的map对象
            sessionScope：代表session对象中的保存属性的map对象
            applicationScope：代表application对象中的保存属性的map对象
            param 代表请求参数组成的map集合${param.userName}
            paramValues 代表请求参宿组成的map集合，但是此集合的value是String[]，用来获取一名多值的param
            header 获取请求头组成的map
            headerValues 获取请求头组成的map但是value是一个String[]，用来获取一名多值的head
            cookie 获取cookie组成的map对象，此map的值是一个cookie对象${cookie.cookieName.cookieValue}
            initParam 以map封装的web.xml中配置的整个web应用的初始化参数
        2.4调用java方法
            el表达式可以调用java中的静态方法,分如下步骤完成：
            (1)编写一个类，其中应该包含要使用el调用的静态方法
            (2)编写一个tld文件，描述该方法的调用，在创建tld文件时应选用2.0版本的jsp配置，指定名称空间uri和缩写prefix
            (3)在tld文件中配置方法信息
                <function>
                    <name>encodeURL</name>el在调用时所使用的方法名
                    <function-class>cn.itheima.util.EncodeURL</function-class>静态方法所在的类全路径名
                    <function-signature>
                        java.lang.String EncodURL( java.lang.String )//对该方法的描述：返回值类型 方法名(参数类型)
                    </function-signature>
                </function>
            (4)在jsp中使用<%@ taglib uri="" prefix="ppp"%>引入tld文件
            (5)在jsp中使用${ppp:encodeURL("xxxx")}调用
            El函数只能移除与Web开发无关的函数，因为El函数无法获取pageContext对象。而自定义标签可以

        2.5SUN提供的EL函数库，基本上都是对字符串进行操作的函数，请参考张老师写的《第8章 标准标签库_0519.doc》        
    3.JSTL标签库，在javaee4.0需要导入JSTL相关的jar包，在javaee5.0开始，默认已经包含了此jar包。还要需要用<%@ taglib%>指令引入标签库
        3.1介绍
            JavaServer Pages Standard Tag Library
            由JCP（Java Community Process）指定标准
            提供给 Java Web 开发人员一个标准通用的标签函数库
            和 EL 配合来取代传统直接在页面上嵌入 Java 程序（Scripting）的做法，以提高程序可读性、维护性和方便性
            一般我们使用JSTL1.1以上的版本，应为从这个版本开始支持EL表达式
            JSTL1.0默认不支持el表达式，不建议使用
        3.2JSTL标签库
            ****核心标签库 (core)  --- c
            国际化标签 fmt
            数据库标签 sql --Servlet
            XML标签  xml
            JSTL函数(EL函数) el
        3.3JSTL核心标签库
        <c:out> 标签用于输出一段文本内容到pageContext对象当前保存的“out”对象中。
        <c:set>标签用于把某一个对象存在指定的域范围内，或者设置Web域中的java.util.Map类型的属性对象或JavaBean类型的属性对象的  属性。  
        <c:remove>标签用于删除各种Web域中的属性
        <c:catch>标签用于捕获嵌套在标签体中的内容抛出的异常，其语法格式如下：<c:catch [var="varName"]>nested actions</c:catch>
        <c:if test=“”>标签可以构造简单的“if-then”结构的条件表达式 
        <c:choose>标签用于指定多个条件选择的组合边界，它必须与<c:when>和<c:otherwise>标签一起使用。使用<c:choose>，<c:when>和<c:otherwise>三个标签，可以构造类似 “if-else if-else” 的复杂条件判断结构。
        <c:forEach>标签用于对一个集合对象中的元素进行循环迭代操作，或者按指定的次数重复迭代执行标签体中的内容。 
        <c:forTokens>用来浏览一字符串中所有的成员，其成员是由定义符号所分隔的
        <c:param>标签     在JSP页面进行URL的相关操作时，经常要在URL地址后面附加一些参数。<c:param>标签可以嵌套在<c:import>、<c:url>或<c:redirect>标签内，为这些标签所使用的URL地址附加参数。
        <c:import> 标签,实现include操作
        <c:url>标签用于在JSP页面中构造一个URL地址，其主要目的是实现URL重写。URL重写就是将会话标识号以参数形式附加在URL地址后面 
        <c:redirect>标签用于实现请求重定向

    4.自定义标签
        自定义标签功能：
            1：移除Jsp中的脚本代码
            2：控制Jsp某部分内容是否输出，通过复写doStartTag方法的返回值
            3：控制Jsp整个内容是否输出，通过复写doEndTag方法的返回值
            4：控制Jsp某部分内容重复执行，通过复写doAfterBody方法返回值
            5：修改Jsp内容，继承BodyTagSupport，复写doStartTag方法的返回值EVAL_BODY_BUFFERD，然后在doEndTag方法中得到内容修改

            Jsp2.0以后实现继承SimpleTagSupport类即可实现上面功能，成为简单标签，之前的成为传统标签。

    *操作所有基本类型类型代码
        

