Filter,Listener学习笔记
一：Filter
	1：filter在开放中的常见应用
		a:在访问目标资源之前，进行权限检查，检查应用是否有权限，有则放行，无则拒绝。


		b:在放行之前进行request和response的预处理，从而实现全局属性的设置。
			①：增强request实现：完全解决get、post请求方式下的乱码问题，转义提交内容
				Servlet  API 中提供了response对象的Decorator设计模式的默认实现类HttpServletResponseWrapper ， （HttpServletResponseWrapper类实现了response接口中的所有方法，但这些方法的内部实现都是仅仅调用了一下所包装的的 response对象的对应方法）以避免用户在对response对象进行增强时需要实现response接口中的所有方法。

				request.setCharacterEncoding("UTF-8");  //post  get
				response.setCharacterEncoding("UTF-8");
				response.setContentType("text/html;charset=UTF-8");
				
				chain.doFilter(new MyRequest(request), response);   //request.getparameter("password");


				class MyRequest extends HttpServletRequestWrapper{

					private HttpServletRequest request;
					public MyRequest(HttpServletRequest request) {
						super(request);
						this.request = request;
					}
					@Override
					public String getParameter(String name) {
						
						String value = this.request.getParameter(name);
						if(!request.getMethod().equalsIgnoreCase("get")){
							return value;
						}
						
						if(value==null){
							return null;
						}
						
						try {
							return value = new String(value.getBytes("iso8859-1"),request.getCharacterEncoding());
						} catch (UnsupportedEncodingException e) {
							throw new RuntimeException(e);
						}
						
					}
			}
			②：禁止浏览器缓存所有动态页面的过滤器
				response.setDateHeader("Expires",-1);
				response.setHeader("Cache-Control","no-cache"); 
				response.setHeader("Pragma","no-cache");
			③：控制浏览器缓存页面中的静态资源的过滤器
				有些动态页面中引用了一些图片或css文件以修饰页面效果，这些图片和css文件经常是不变化的，所以为减轻服务器的压力，可以使用filter控制浏览器缓存这些文件，以提升服务器的性能。
			④：实现用户自动登陆的过滤器
				在用户登陆成功后，发送一个名称为user的cookie给客户端，cookie的值为用户名和md5加密后的密码。
				编写一个AutoLoginFilter，这个filter检查用户是否带有名称为user的cookie来，如果有，则调用dao查询cookie的用户名和密码是否和数据库匹配，匹配则向session中存入user对象（即用户登陆标记），以实现程序完成自动登陆。
			⑤：敏感词过滤器
		c:放行之后，可以捕获目标资源的输出，从而对输出做类似压缩的设置。
			①：压缩响应
				应用HttpServletResponseWrapper对象，压缩响应正文内容。思路:
				通过filter向目标页面传递一个自定义的response对象。
				在自定义的response对象中，重写getOutputStream方法和getWriter方法，使目标资源调用此方法输出页面内容时，获得的是我们自定义的ServletOutputStream对象。
				在我们自定义的ServletOuputStream对象中，重写write方法，使写出的数据写出到一个buffer中。
				当页面完成输出后，在filter中就可得到页面写出的数据，从而我们可以调用GzipOuputStream对数据进行压缩后再写出给浏览器，以此完成响应正文件压缩功能。

				MyResponse myresponse = new MyResponse(response);

				chain.doFilter(request, myresponse);  //response.getwriter  response.getOutputStream  
				byte out[] = myresponse.getBuffer();  
				byte gzipout[] = gzip(out);
				
				response.setHeader("content-encoding", "gzip");
				response.setHeader("content-length", gzipout.length + "");
				response.getOutputStream().write(gzipout);


				class MyResponse extends HttpServletResponseWrapper{
					private ByteArrayOutputStream bout = new ByteArrayOutputStream();
					private PrintWriter pw;
					
					private HttpServletResponse response;
					public MyResponse(HttpServletResponse response) {
						super(response);
						this.response = response;
					}
					@Override
					public ServletOutputStream getOutputStream() throws IOException {
						return new MyServletOutputStream(bout);    //myresponse.getOutputStream().write("hahah");
					}
					
					@Override
					public PrintWriter getWriter() throws IOException {
						pw = new PrintWriter(new OutputStreamWriter(bout,response.getCharacterEncoding()));
						return pw;  //MyResponse.getWriter().write("ÖÐ¹ú");
					}
					public byte[] getBuffer(){
						if(pw!=null){
							pw.close();
						}
						return bout.toByteArray();
					}
				}
			
			class MyServletOutputStream extends ServletOutputStream{

				private ByteArrayOutputStream bout;
				public MyServletOutputStream(ByteArrayOutputStream bout){
					this.bout = bout;
				}
				@Override
				public void write(int b) throws IOException {
					bout.write(b);
				}
				
			}
			②：缓存数据到内存
				对于页面中很少更新的数据，例如商品分类，为避免每次都要从数据库查询分类数据，因此可把分类数据缓存在内存或文件中，以此来减轻数据库压力，提高系统响应速度

	2：多个Filter组成Filter链
		根据web.xml中<filter-mapping>定义的顺序，先定义的先执行，当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源。

		<filter-mapping>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径
		<filter-name>子元素用于设置filter的注册名称。该值必须是在<filter>元素中声明过的过滤器的名字
		<url-pattern>设置 filter 所拦截的请求路径(过滤器关联的URL样式)
		<servlet-name>指定过滤器所拦截的Servlet名称。
		<dispatcher>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。用户可以设置多个<dispatcher> 子元素用来指定 Filter 对资源的多种调用方式进行拦截。
	3：Filter对象的生命周期
		服务器启动时，创建所有的拦截器，浏览器访问拦截的资源时，共用同一个Filter对象
		停止服务器，或者移除当前web应用，Filter对象被摧毁。
	4：FilterConfig接口
		用户在配置filter时，可以使用<init-param>为filter配置一些初始化参数，当web容器实例化Filter对象，调用其init方法时，会把封装了filter初始化参数的filterConfig对象传递进来。因此开发人员在编写filter时，通过filterConfig对象的方法，就可获得：
			String getFilterName()：得到filter的名称。
			String getInitParameter(String name)： 返回在部署描述中指定名称的初始化参数的值。如果不存在返回null.
			Enumeration getInitParameterNames()：返回过滤器的所有初始化参数的名字的枚举集合。
			public ServletContext getServletContext()：返回Servlet上下文对象的引用

	5：web资源的四种调用方式
		request,forword,include,error
		request是直接浏览器调用，其他三种则是应用程序通知web容器，web容器再调用。

二：Listener
	监听器：监听器就是一个java程序，功能是监听另一个java对象变化（方法调用、属性变更）

	监听器监听过程：事件源、事件对象、监听器对象 、操作事件源
		1、存在被监听对象（事件源）
		2、存在监听器对象 
		3、在事件源中注册监听器 
		4、操作事件源，使事件源发生改变 ，产生事件对象 *事件对象 就是 事件源的改变 
		5、事件对象会被传递给监听器，触发监听器相应行为

	Servlet的8个监听器，分为三类：
		第一类：监听三个数据范围对象（request、session、ServletContext）的创建和销毁监听器 
		第二类：监听三个数据范围对象中属性变更(增加、替换、删除)的监听器
		第三类：监听HttpSession中对象状态改变（被绑定、解除绑定、钝化、活化）的监听器

		
		一、三个域对象创建和销毁监听器
		1、ServletContextListener 监听 ServletContext 对象的创建和销毁事件  
		void contextInitialized(ServletContextEvent sce) ---- 监听Context对象创建 
		void contextDestroyed(ServletContextEvent sce)  ----- 监听Context对象的销毁

		ServletContext 全局唯一对象，每个工程创建唯一Context对象（配置全局初始化参数、保存全局共享数据、读取web资源文件） 
		在服务器启动时创建ServletContext对象，在服务器关闭时销毁ServletContext对象 

		编写监听器步骤
		1) 编写类 ，实现特定监听器接口 
		2) Servlet监听器，不是注册在事件源上，而是注册在web.xml 中，由容器tomcat完成监听器注册 
		  <!-- 注册监听器 , tomcat将监听器注册给事件源， 事件源操作后，会自动监听器执行 -->
		  <!-- 和Servlet Filter不同，不需要配置url -->
		  <listener>
		  	<listener-class>cn.itcast.web.listener.MyServletContextListener</listener-class>
		  </listener>

		应用：
		1) 保存全局范围对象，因为监听ServletContext对象，监听器都可以通过事件对象获得事件源  
		// 获得被监听事件源对象
		ServletContext context = sce.getServletContext();
		2) 读取框架配置文件 例如: spring框架 org.springframework.web.context.ContextLoaderListener 
		3) 在ServletContextListener 定义一些定时器程序 （任务调度程序）

		最简单java中任务调度 ----- 定时器Timer 和 TimerTask的使用
		Timer启动定时器任务
		void schedule(TimerTask task, Date firstTime, long period)  ------- 指定启动任务第一次时间，通过period参数指定任务重复执行
		void schedule(TimerTask task, long delay, long period) ----- 指定任务距离当前时间delay 多久开始启动，通过period指定任务重复执行 

		终止定时器任务执行 timer.cancel(); 

		2、HttpSessionListener  监听HttpSession对象的创建和销毁
		void sessionCreated(HttpSessionEvent se)  ----- 监听Session对象创建
		void sessionDestroyed(HttpSessionEvent se)  ---- 监听Session对象销毁 

		Session对象何时创建 ： request.getSession(); 第一次执行时 创建Session对象 
		* 访问JSP时，因为其内置对象session，所以一定会创建Session对象的 

		Session对象何时销毁 ： 1) 不正常关闭服务器 2) Session对象过期 3) invalidate方法调用
		* 正常关闭服务器时，Session的数据保存tomcat/work目录下  --- 产生 SESSIONS.ser 
		* session的过期时间在web.xml 进行配置 
		  <session-config>
		  	<!-- 单位是分钟，连续30分钟没有使用该Session对象，就会销毁对象 -->
		  	<session-timeout>30</session-timeout>
		  </session-config>

		3、ServletRequestListener 监听Request对象的创建和销毁 
		void requestDestroyed(ServletRequestEvent sre)   ----- 监听request对象销毁的
		void requestInitialized(ServletRequestEvent sre)  ---- 监听request对象创建的

		每次客户端发起一次新的请求 产生request对象，当response响应结束后，request对象进行销毁 

		forward不会产生新的request对象，sendRedirect产生新的request对象 

		监听器案例：
		案例一： 统计当前在线人数 
		分析：统计Session 的个数 ，存在一个Session，意味着一个浏览器在访问 

		案例二： 自定义session定时扫描器（销毁session对象）
		编写定时器程序，定时去扫描系统中所有Session对象，发现如果一个Session 1分钟没有使用了，就销毁该Session对象 

		=============================================================================================================================
		二、ServletRequest、HttpSession、ServletContext 三个数据范围中 数据变更监听器 
		ServletContextAttributeListener, HttpSessionAttributeListener ServletRequestAttributeListener

		这三个接口中都定义了三个方法来处理被监听对象中的属性的增加，删除和替换的事件
		1、attributeAdded  属性添加方法 
		public void attributeAdded(ServletContextAttributeEvent scae) 
		public void attributeAdded (HttpSessionBindingEvent  hsbe) 
		public void attributeAdded(ServletRequestAttributeEvent srae)

		2、attributeRemoved  属性移除方法
		public void attributeRemoved(ServletContextAttributeEvent scae) 
		public void attributeRemoved (HttpSessionBindingEvent  hsbe) 
		public void attributeRemoved (ServletRequestAttributeEvent srae)

		3、attributeReplaced  属性替换方法
		public void attributeReplaced(ServletContextAttributeEvent scae) 
		public void attributeReplaced (HttpSessionBindingEvent  hsbe) 
		public void attributeReplaced (ServletRequestAttributeEvent srae)

		何时调用attributeAdded 、attributeRemoved  、attributeReplaced  ？ 
		以HttpSessionAttributeListener为例 
		        // 向session中添加了一个属性
			session.setAttribute("name","张三"); // 因为name属性还不存在 --- attributeAdded

			// 向Session保存属性name的值李四，因为name属性已经存在，替换效果
			session.setAttribute("name","李四"); // 因为name属性以及存在 --- attributeReplaced
			
			// 移除session的属性name
			session.removeAttribute("name"); // 移除name属性 ---- attributeRemoved

		****** 如果执行session.invalidate(); 销毁了Session 导致Session中所有属性被移除 

		===========================================================================================================================
		三、Session中对象状态改变 监听器
		Session中对象共有四种状态
		1、绑定 ----- 对象被添加到Session中
		2、解除绑定 ----- 对象从Session中移除 
		3、钝化 ----- Session中数据被序列化到硬盘上 
		4、活化 ----- Session序列化数据 从硬盘被加载回内存 

		使JavaBean 了解到自己在Session中状态的变化 
		HttpSessionBindingListener 感知到绑定以及解除绑定
		HttpSessionActivationListener 感知钝化和活化 状态改变 

		不需要 web.xml 文件中进行注册 （这两类监听器，不是由容器进行管理的，由HttpSession对象管理 ）

		HttpSessionBindingListener
		void valueBound(HttpSessionBindingEvent event)  绑定
		void valueUnbound(HttpSessionBindingEvent event)  解除绑定 

		编写javabean实现 HttpSessionBindingListener接口，该javabean对象感知到自己被绑定到Session或者从Session解除绑定 
		valueBound ， 当对象被加入session 就会执行
		valueUnbound， 当对象从Session 移除时 就会执行 

		HttpSessionActivationListener 监听对象被钝化和活化 
		void sessionDidActivate(HttpSessionEvent se)  活化 
		void sessionWillPassivate(HttpSessionEvent se)  钝化 （java对象被序列化到硬盘上 ）

		如果tomcat正常关闭，Session中对象会被序列化到硬盘上 ---- java对象如果能被序列化必须实现Serializable接口 
		异常 ：IOException while loading persisted sessions: java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException: cn.itcast.bean.Bean2
		原因 ：恢复Session.ser文件时，因为需要对象无法从文件中加载，发生异常 （删除Session.ser就可以了 ）
		* 保存到Session中对象，应该被序列化 

		在Session中数据对象，保存了一段时间后没有使用，不想删除对象中数据，（在不关闭服务器情况下）可以让对象数据进行钝化 ---- 序列化到硬盘上 
		下次再访问数据时，从钝化的文件中读取序列化数据 ----- 对数据进行活化 
		* 由tomcat完成钝化和活化，配置<Context> 标签 
		配置Context标签有三个常用位置
		1) tomcat/conf/context.xml 所有虚拟主机、所有web应用都可以使用配置
		2) tomcat/conf/Catalina/localhost/context.xml 当前虚拟主机 所有web应用都可以使用配置
		3) 当前工程/META-INF/context.xml  只对当前工程有效 

		配置钝化目录在tomcat/work 下 ---- 和Session默认保存位置一样 
	




